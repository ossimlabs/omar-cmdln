buildscript {
  ext {
    grailsVersion = project.grailsVersion
    baseImage = ""
    hasJar = { true }
  }
    if(System.env.OMAR_COMMON_PROPERTIES)
    {
      apply from: System.env.OMAR_COMMON_PROPERTIES
    }
    repositories {
      mavenLocal()
      maven { url "${ossimMavenProxy}" }
      if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
        maven { url "https://repo.grails.org/grails/core" }
      }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    }
}

plugins {
  id "com.github.ben-manes.versions" version "0.17.0"
}

version "${buildVersion}-${buildVersionTag}"

group "omar.cmdln.app"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-core"
apply plugin: "maven-publish"
apply plugin: "maven"

repositories {
    mavenLocal()
    maven { url "${ossimMavenProxy}" }
    if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
      maven { url "https://repo.grails.org/grails/core" }
    }
}

grails {
  plugins {
      compile project(':omar-core-plugin')
      compile project(':omar-raster-plugin')
      compile project(':omar-video-plugin')
      compile project(':omar-stager-plugin')
      compile project(':omar-hibernate-spatial-plugin')
  }
}

dependencies {
  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-plugin-i18n"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  // compile "org.grails.plugins:scaffolding"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:5.1.5.Final"
  // compile "org.grails.plugins:gsp"
  console "org.grails:grails-console"
  profile "org.grails.profiles:web"
  runtime "org.glassfish.web:el-impl:2.1.2-b03"
  runtime "com.h2database:h2"
  runtime "org.apache.tomcat:tomcat-jdbc"
  testCompile "org.grails:grails-gorm-testing-support"
  // testCompile "org.grails:grails-web-testing-support"
  testCompile "org.grails.plugins:geb"
}

bootRun {
  jvmArgs('-Dspring.output.ansi.enabled=always')
  addResources = true
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}
